#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include "enfriamiento_simulado.h"
#include "busqueda_local.h"

int **pm1, **pm2, copia_n;

/*Funci贸n para generar un vecino*/
void Genera_Vecino (int * solupri, int *pos1, int *pos2){
    int aux;
    *pos1 = obtener_aleatorio(0,copia_n-1);
    do {
        *pos2 = obtener_aleatorio(0,copia_n-1);
    } while (*pos1 == *pos2);

    aux = solupri[*pos1];
    solupri[*pos1] = solupri[*pos2];
    solupri[*pos2] = aux;

}

/*Criterio de metr贸polis*/
int metrop (int diferenciadecoste, float tempe){
    double aux = ((double) -diferenciadecoste/tempe);
    return diferenciadecoste < 0 || GenerarAleatorio(9999999) < aux;
}

/*Funci贸n para enfriar*/
float Enfriar(float t_inicial, float t_actual, int m){
    float res;
    float beta = (t_inicial-0.001)/(m*t_inicial*0.001);
    res = (t_actual)/(1+(beta*t_actual));
    return res;
}

/*Aplico enfriamiento simulado*/
void aplicarEnfriamientoSimulado(int n, int **mat1, int **mat2, int *mejorsolucion, int *mejorcosto){
	//Genero soluci贸n incial
	int * solupri;
	int * solucion;
	solupri = (int *)malloc(n*sizeof(int));
	solucion = (int *)malloc(n*sizeof(int));
	copia_n = n;
	int i;
    permutar_Solucion(mejorsolucion,n);
    for (i = 0; i<n; i++){
        solupri[i]=mejorsolucion[i];
        solucion[i]=mejorsolucion[i];
    }
    int costeact=costeSolucion(solucion,n);
    int costepri;
    int diferenciacoste;
    int acepto;
    int aux;
    float t_actual;
    float t_inicial;
    int max_vecinos;
    int max_exitos;
    max_vecinos = 10*n;
    max_exitos = 0.1*max_vecinos;
    t_inicial = (0.1*costeact)/(-1*(log(0.1)));
    t_actual = t_inicial;
    (*mejorcosto)=costeact;
    int n_enfriamientos = 25000/max_vecinos;
    //Bucle principal del ES
    int n_exitos;
    for (i=0; i<n_enfriamientos; i++){
        n_exitos=0;
        int k, pos1, pos2;

        for (k=0; k<max_vecinos; k++){
            Genera_Vecino(solupri,&pos1,&pos2);
            costepri = costeSolucion(solupri,n);
            diferenciacoste = costepri - costeact;
            acepto = metrop(diferenciacoste,t_actual);

            if (acepto){
                n_exitos++;

                costeact = costepri;
                aux = solucion[pos1];
                solucion[pos1] = solucion[pos2];
                solucion[pos2] = aux;

                if (costeact < (*mejorcosto)){
                    (*mejorcosto) = costeact;
                    int f;
                    for (f=0; f<n; f++){
                        mejorsolucion[f]=solucion[f];
                    }
                }
            }
            else {
                int aux1;
                aux1 = solupri[pos1];
                solupri[pos1] = solupri[pos2];
                solupri[pos2] = aux1;
            }
            if (n_exitos >= max_exitos) break;
        }
        t_actual = Enfriar(t_inicial, t_actual, n_enfriamientos);

        if(n_exitos == 0) break;
    }
}
